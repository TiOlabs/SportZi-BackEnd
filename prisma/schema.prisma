// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ArcadeBooking {
  id                Int    @id @default(autoincrement())
  // user_id         Int
  // arcade_id       Int
  booking_date      String
  booking_time      String
  zone              String
  participant_count Int

  // booking_status  String
  // booking_type    String
  created_at      DateTime @default(now())
  // updated_at      DateTime @updatedAt
  // user            User     @relation(fields: [user_id], references: [id])
  // arcade          Arcade   @relation(fields: [arcade_id], references: [id])
  cancel_by_admin Boolean
  cancel_by_player  Boolean
  cancel_by_arcade Boolean
}



// model User {
//   id           Int    @id @default(autoincrement())
//   user_id      Int
//   arcade_id    Int
//   booking_date String
//   booking_time String

//   booking_status String
//   booking_type   String
//   created_at     DateTime @default(now())
//   updated_at     DateTime @updatedAt
//   // user            User     @relation(fields: [user_id], references: [id])
//   // arcade          Arcade   @relation(fields: [arcade_id], references: [id])
// }

model Discount {
  discount_id         Int    @id @default(autoincrement())
  discount_percentage Int
  description         String
  discount_image      String
}


model User {
  user_id       String         @id @unique
  role          Role
  firstname     String
  lastname      String
  email         String         @unique
  password      String
  phone         String
  DOB           String?
  gender        String
  accountNumber Int?
  is_active     Boolean        @default(true)
  user_image    String
  Player        Player?
  Coach         Coach?
  Manager       ArcadeManager?
  coachAssignDetails CoachAssignDetails[]
}

model Player {
  player_id String @id @unique
  user      User   @relation(fields: [player_id], references: [user_id])
}

model Coach {
  coach_id String @id @unique
  sport    String
  assign_to_arcade Boolean @default(false)
  user     User   @relation(fields: [coach_id], references: [user_id])
}

model ArcadeManager {
  manager_id String   @id @unique
  user       User     @relation(fields: [manager_id], references: [user_id])
  arcade     Arcade[]
}

model Arcade {
  arcade_id    String        @id
  arcade_name  String
  location     String
  address      String?
  arcade_email String
  manager_id       String
  manager      ArcadeManager @relation(fields: [manager_id], references: [manager_id])
  coachAssignDetails CoachAssignDetails[]
}

model CoachAssignDetails {
  assign_id   String    @id @unique
  rate        Int
  duration    Int
  description String
  assigned_date String
  status      Boolean @default(false)
  approved_by_manager Boolean @default(false)
  coach_id String 
  arcade_id String
  created_at DateTime @default(now())
   // updated_at DateTime @updatedAt
  user       User   @relation(fields: [coach_id], references: [user_id])
  arcade     Arcade @relation(fields: [arcade_id], references: [arcade_id])

}

model Feedbacks {
  feedbacks_id String    @id @unique
  rate         Float
}

model Coach_booking_details {
  booking_id String @id @unique
  status Boolean @default(false)
  created_at DateTime @default(now())
   // updated_at DateTime @updatedAt
  rate Int
  duration Int
  participant_count Int
  starting_date DateTime
  cancel_by_admin Boolean
  cancel_by_player  Boolean
  cancel_by_arcade Boolean
  user_id    String
  coach_id   String
  // user       User   @relation(fields: [user_id], references: [user_id])
  // coach      Coach  @relation(fields: [coach_id], references: [coach_id])
}

model Package {
  package_id String @id @unique
  package_name String
  description String
  package_image String
  rate Int
  created_at DateTime @default(now())
   // updated_at DateTime @updatedAt
}

model Package_Assign_Details {
  package_assign_id String @id @unique
  status Boolean @default(false)
  created_at DateTime @default(now())
   // updated_at DateTime @updatedAt
  user_id String
  package_id String
  // user       User    @relation(fields: [user_id], references: [user_id])
  // package    Package @relation(fields: [package_id], references: [package_id])
}

enum Role {
  PLAYER
  COACH
  MANAGER
  ADMIN
}










model ArcadeRatings{
  rating_id Int @id @default(autoincrement())
  rating Int
  discription String
}

